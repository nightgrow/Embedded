
LED_Shift_1_Switch_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  0000137a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000426  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bbe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	60 c0       	rjmp	.+192    	; 0x15c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRE = 0x00;
  9e:	12 b8       	out	0x02, r1	; 2
	DDRB = 0xFF;
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	87 bb       	out	0x17, r24	; 23
	
	PORTB = 0xFF;
  a4:	88 bb       	out	0x18, r24	; 24
	while (1)
	{
		if(!(PINE & 0x01))
		{
			if((PORTB & 0x7f) == 0x7f)
			PORTB = 0xfe;
  a6:	3e ef       	ldi	r19, 0xFE	; 254
		}
		
		if(!(PINE & 0x02))
		{
			if((PORTB & 0xFE) == 0xFE)
			PORTB = 0x7F;
  a8:	2f e7       	ldi	r18, 0x7F	; 127
		}
		
		if(!(PINE & 0x04))
		{
			if((PORTB & 0x3F) == 0x3F)
			PORTB = 0xFC;
  aa:	9c ef       	ldi	r25, 0xFC	; 252
		}
		
		if(!(PINE & 0x08))
		{
			if((PORTB & 0xFC) == 0xFC)
			PORTB = 0x3F;
  ac:	4f e3       	ldi	r20, 0x3F	; 63
	
	PORTB = 0xFF;
	
	while (1)
	{
		if(!(PINE & 0x01))
  ae:	08 99       	sbic	0x01, 0	; 1
  b0:	13 c0       	rjmp	.+38     	; 0xd8 <main+0x3a>
		{
			if((PORTB & 0x7f) == 0x7f)
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	8f 77       	andi	r24, 0x7F	; 127
  b6:	8f 37       	cpi	r24, 0x7F	; 127
  b8:	11 f4       	brne	.+4      	; 0xbe <main+0x20>
			PORTB = 0xfe;
  ba:	38 bb       	out	0x18, r19	; 24
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <main+0x28>
			else
			PORTB = ((PORTB << 1) | (0x01));
  be:	88 b3       	in	r24, 0x18	; 24
  c0:	88 0f       	add	r24, r24
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	5f ef       	ldi	r21, 0xFF	; 255
  c8:	65 ea       	ldi	r22, 0xA5	; 165
  ca:	8e e0       	ldi	r24, 0x0E	; 14
  cc:	51 50       	subi	r21, 0x01	; 1
  ce:	60 40       	sbci	r22, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x2e>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x38>
  d6:	00 00       	nop
			
			_delay_ms(300);
		}
		
		if(!(PINE & 0x02))
  d8:	09 99       	sbic	0x01, 1	; 1
  da:	13 c0       	rjmp	.+38     	; 0x102 <main+0x64>
		{
			if((PORTB & 0xFE) == 0xFE)
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	8e 3f       	cpi	r24, 0xFE	; 254
  e2:	11 f4       	brne	.+4      	; 0xe8 <main+0x4a>
			PORTB = 0x7F;
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <main+0x52>
			else
			PORTB = ((PORTB >> 1) | (0x80));
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	86 95       	lsr	r24
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	5f ef       	ldi	r21, 0xFF	; 255
  f2:	65 ea       	ldi	r22, 0xA5	; 165
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	51 50       	subi	r21, 0x01	; 1
  f8:	60 40       	sbci	r22, 0x00	; 0
  fa:	80 40       	sbci	r24, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x58>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x62>
 100:	00 00       	nop
			
			_delay_ms(300);
		}
		
		if(!(PINE & 0x04))
 102:	0a 99       	sbic	0x01, 2	; 1
 104:	14 c0       	rjmp	.+40     	; 0x12e <main+0x90>
		{
			if((PORTB & 0x3F) == 0x3F)
 106:	88 b3       	in	r24, 0x18	; 24
 108:	8f 73       	andi	r24, 0x3F	; 63
 10a:	8f 33       	cpi	r24, 0x3F	; 63
 10c:	11 f4       	brne	.+4      	; 0x112 <main+0x74>
			PORTB = 0xFC;
 10e:	98 bb       	out	0x18, r25	; 24
 110:	05 c0       	rjmp	.+10     	; 0x11c <main+0x7e>
			else
			PORTB = ((PORTB << 2) | (0x03));
 112:	88 b3       	in	r24, 0x18	; 24
 114:	88 0f       	add	r24, r24
 116:	88 0f       	add	r24, r24
 118:	83 60       	ori	r24, 0x03	; 3
 11a:	88 bb       	out	0x18, r24	; 24
 11c:	5f ef       	ldi	r21, 0xFF	; 255
 11e:	65 ea       	ldi	r22, 0xA5	; 165
 120:	8e e0       	ldi	r24, 0x0E	; 14
 122:	51 50       	subi	r21, 0x01	; 1
 124:	60 40       	sbci	r22, 0x00	; 0
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x84>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x8e>
 12c:	00 00       	nop
			
			_delay_ms(300);
		}
		
		if(!(PINE & 0x08))
 12e:	0b 99       	sbic	0x01, 3	; 1
 130:	be cf       	rjmp	.-132    	; 0xae <main+0x10>
		{
			if((PORTB & 0xFC) == 0xFC)
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8c 7f       	andi	r24, 0xFC	; 252
 136:	8c 3f       	cpi	r24, 0xFC	; 252
 138:	11 f4       	brne	.+4      	; 0x13e <main+0xa0>
			PORTB = 0x3F;
 13a:	48 bb       	out	0x18, r20	; 24
 13c:	05 c0       	rjmp	.+10     	; 0x148 <main+0xaa>
			else
			PORTB = ((PORTB >> 2) | (0xC0));
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	86 95       	lsr	r24
 142:	86 95       	lsr	r24
 144:	80 6c       	ori	r24, 0xC0	; 192
 146:	88 bb       	out	0x18, r24	; 24
 148:	5f ef       	ldi	r21, 0xFF	; 255
 14a:	65 ea       	ldi	r22, 0xA5	; 165
 14c:	8e e0       	ldi	r24, 0x0E	; 14
 14e:	51 50       	subi	r21, 0x01	; 1
 150:	60 40       	sbci	r22, 0x00	; 0
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0xb0>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0xba>
 158:	00 00       	nop
 15a:	a9 cf       	rjmp	.-174    	; 0xae <main+0x10>

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
